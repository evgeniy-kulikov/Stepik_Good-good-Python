# 6.5 Операции над множествами. Сравнение множеств
""""""
"""
С множествами можно выполнять множество операций: находить объединение, пересечение...
Сравниваем множества setA и setB 
setA = {1, 2, 3, 4}
setB = {3, 4, 5, 6, 7}

setC = {8, 9, 10}
setD = {1, 2}

setA.isdisjoint(setB) - истина, если setA и setB не имеют общих элементов.
False

setA == setB - все элементы setA принадлежат setB, все элементы setB принадлежат setA.
False

setA != setB
True

setD == setA  # False- Множество setD полностью присутствует в множестве setA, но его длина отличается.
setD < setA   # True  - Множество setD полностью присутствует в множестве setA, но его длина меньше.
setA < setD   # False

setA.issubset(setB) или setA <= setB - все элементы setA принадлежат setB.
False

setA.issuperset(setB) или setA >= setB - аналогично.
False

setA.union(setB, ...) или setA | setB | ... - объединение нескольких множеств.
{1, 2, 3, 4, 5, 6, 7}

setA.intersection(setB, ...) или setA & setB & ... - пересечение множеств (общие элементы множеств).
{3, 4}
setA & setC
set()  # пустое множество

setA.difference(setB, ...) или setA - setB - ... - множество из всех элементов setA, не принадлежащие ни одному из setB.
{1, 2}

setB.difference(setA) - множество из всех элементов setB, не принадлежащие ни одному из setA.
{5, 6, 7}

setA.symmetric_difference(setB); setA ^ setB - множество из элементов, встречающихся в каждом множестве, но не встречающиеся в обоих.
{1, 2, 5, 6, 7}

el in setA - принадлежит ли el множеству setA.
len(setA) - число элементов в множестве (размер множества).
setA.copy() - копия множества.


Операции изменения множеств

setA = setA & setB  - Перезаписываем множество setA результатом пересечения множеств setA и setB
{3, 4}
setA &= setB  - короткая запись
setA.intersection_update(setB) - аналогичный результат через встроенную функцию.

setA = setA | setB  - Перезаписываем множество setA результатом объединения множеств setA и setB
{1, 2, 3, 4, 5, 6, 7}
setA |= setB  - короткая запись
setA.update(setB) - аналогичный результат через встроенную функцию.
setA = setA.union(setB) - аналогичный результат через встроенную функцию.

setA = setA - setB
{1, 2}
setA -= setB  - короткая запись
setA.difference_update(setB) - аналогичный результат через встроенную функцию.
"""


#  *   *   *   *   *   TASK    *   *   *   *   *

"""
Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел). 
Необходимо выбрать и отобразить на экране уникальные числа, 
присутствующие и в первом и во втором списках одновременно. 
Результат выведите на экран в виде строки чисел, 
записанных по возрастанию через пробел.
Input:  8 11 12 15 -2
        4 11 10 15 -5 1 -2
Output: -2 11 15
"""
a = set(map(int, input().split()))
b = set(map(int, input().split()))
s = a.intersection(b)
# s = a & b
print(*sorted(s))


"""
Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел). 
Необходимо выбрать и отобразить на экране уникальные числа, 
присутствующие в первом списке, но отсутствующие во втором. 
Результат выведите на экран в виде строки чисел, записанных по возрастанию через пробел.
Input:  8 5 3 5 -3 1
        1 2 3 4
Output: -3 5 8
"""
a = set(map(int, input().split()))
b = set(map(int, input().split()))
s = a.difference(b)
# s = a - b
print(*sorted(s))


"""
Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел). 
Необходимо выбрать и отобразить на экране уникальные числа, 
присутствующие в первом или втором списках, но отсутствующие одновременно в обоих. 
Результат выведите на экран в виде строки чисел, записанных по возрастанию через пробел.
Input:  1 2 3 4 5
        4 5 6 7 8
Output: 1 2 3 6 7 8
"""
a = set(map(int, input().split()))
b = set(map(int, input().split()))
s = a.symmetric_difference(b)
# s = a ^ b
print(*sorted(s))


"""
Вводятся два списка городов каждый с новой строки (в строке названия через пробел). 
Необходимо сравнить их между собой на равенство по уникальным (не повторяющимся) городам. 
Если списки содержат одни и те же уникальные города, то вывести на экран ДА, иначе - НЕТ.
Input:  Москва Тверь Уфа Казань Уфа Москва
        Уфа Тверь Москва Казань
Output: ДА
"""
a = set(map(str, input().split()))
b = set(map(str, input().split()))
s = ('НЕТ', "ДА")[a == b]
# s = ['ДА','НЕТ'][len(a ^ b) > 0]
# s = ['ДА','НЕТ'][len(a.symmetric_difference(b)) > 0]
print(s)


"""
Вводится список оценок студента - его ответов у доски по предмету "Информатика" 
в виде чисел от 2 до 5 в одну строку через пробел. 
Если студент имеет хотя бы одну двойку, то он не допускается до экзамена. 
Определить на основе введенного списка, допущен ли студент. 
Если допущен, то вывести слово ДОПУЩЕН, иначе - НЕ ДОПУЩЕН. 
При реализации задачи используйте множество для определения наличия двойки.  3 4 4 5 4 3
Input:  3 4 4 5 2 3
Output: НЕ ДОПУЩЕН
"""
a = set(map(int, input().split()))
b = {2}
s = ("ДОПУЩЕН", "НЕ ДОПУЩЕН")[b.issubset(a)]
print(s)
# print('НЕ ДОПУЩЕН' if len(a & b) >  0 else 'ДОПУЩЕН')
# print('НЕ ДОПУЩЕН' if len(a | b) == len(a) else 'ДОПУЩЕН')
# print('НЕ ДОПУЩЕН' if len(a - b) == (len(a)-1) else 'ДОПУЩЕН')
# print('НЕ ДОПУЩЕН' if 2 in a else 'ДОПУЩЕН')



"""
Вводятся два списка городов каждый с новой строки (в строке названия через пробел), 
которые объехал Сергей в 1-й и 2-й годы своего путешествия по России. 
Требуется определить, включал ли его маршрут во 2-й год все города 1-го года путешествия? 
Если это так, то вывести ДА, иначе - НЕТ.
Input:  Москва Казань Самара Москва
        Москва Владимир Новгород Казань Самара Москва
Output: ДА
"""
a = set(map(str, input().split()))
b = set(map(str, input().split()))
s = ("НЕТ", "ДА")[a.issubset(b)]
# s = ("НЕТ", "ДА")[a <= b]
# s = ("НЕТ", "ДА")[a & b == a]
print(s)


"""
Вводится натуральное число, которое может быть определено простыми множителями 1, 2, 3, 5 и 7. 
Необходимо разложить введенное число на указанные простые множители и 
проверить, содержит ли оно множители 2, 3 и 5 (все указанные множители)? 
Если это так, то вывести ДА, иначе - НЕТ
Input:  210
Output: ДА
"""
num = int(input())
a = {2, 3, 5}
b = set([el for el in [1, 2, 3, 5, 7] if num % el == 0])
print(("НЕТ", "ДА")[a.issubset(b)])

# print(('НЕТ', 'ДА')[b >= a])
# print(("НЕТ", "ДА")[a & b == a])
#
# print(("НЕТ", "ДА")[num % 30 == 0])
