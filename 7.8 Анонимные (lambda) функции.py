#  7.8 Анонимные (lambda) функции
""""""

# Инструкция
defined_cube = lambda x: x ** 3


# Эквивалентная функция
def defined_cube(x):
    return x ** 3


print(defined_cube(5))  # 125

"""
Без использования лямбды: 
Здесь обе функции возвращают заданное значение, возведенное в куб. 
Но при использовании def, нам пришлось определить функцию с именем и defined_cube() дать ей входную величину.  
После выполнения нам также понадобилось возвратить результат, из того места, откуда была вызвана функция, 
и мы сделали это, используя ключевое слово return.

С применением лямбды: 
Определение лямбды не включает оператор return, а всегда содержит возвращенное выражение. 
Мы также можем поместить определение лямбды в любое место, где ожидается функция, 
и нам не нужно присваивать его переменной. Так выглядят простые лямбда-функции.
"""

"""
Лямбда-функции и функции высшего порядка
Мы используем лямбда-функцию, когда нам ненадолго требуется безымянная функция.
В Python мы часто используем их как аргумент функции высшего порядка:
функции, которая принимает другие функции в качестве аргументов.  
Лямбда-функции используют вместе с такими встроенными функциями как filter(), map(),reduce() и др.
"""
# Отбор четных чисел из списка.
my_list = [1, 3, 4, 6, 10, 11, 15, 12, 14]
new_list = list(filter(lambda x: (x % 2 == 0), my_list))
print(new_list)  # [4, 6, 10, 12, 14]

# Пример использования функции map() для удвоения всех элементов списка
current_list = [1, 3, 4, 6, 10, 11, 15]
new_list = list(map(lambda x: x * 2, current_list))
print(new_list)  # [2, 6, 8, 12, 20, 22, 30]


"""
Лямбда и условные операторы
Давайте рассмотрим использование условий if-else в лямбда-функции. 
Как вы знаете, Python позволяет нам использовать однострочные условия, 
и  именно их мы можем помещать в лямбда-функцию для обработки возвращаемого результата.
Например, есть две цифры, и вы должны определить, какая из них представляет наибольшее число.
"""
max_number = lambda a, b: a if a > b else b
print(max_number(3, 5))  # 5


#  *   *   *   *   *   TASK    *   *   *   *   *


"""
Объявите анонимную (лямбда) функцию с одним параметром для возведения числа в квадрат. 
Присвойте эту функцию переменной get_sq.
"""
get_sq = lambda x: x ** 2


"""
Объявите анонимную (лямбда) функцию с двумя параметрами для деления одного целого числа на другое. 
Если происходит деление на ноль, то функция должна возвращать значение None, иначе - результат деления.
Присвойте эту функцию переменной get_div.
"""
get_div = lambda a, b: a / b if b != 0 else None

# Короче
get_div = lambda a, b: a / b if b else None


"""
Объявите анонимную (лямбда) функцию для вычисления модуля числа 
(то есть, отрицательные числа нужно делать положительными). 
Вызовите эту функцию для введенного числа x:
x = float(input())
Input:  -5.6
Output: 5.6
"""
x = float(input())

abs_num = lambda a: -a if a < 0 else a
# abs_num = lambda a: a * -1 if a < 0 else a

print(abs_num(x))


"""
Объявите анонимную (лямбда) функцию для определения вхождения в переданную ей строку фрагмента "ra". 
То есть, функция должна возвращать True, если такой фрагмент присутствует в строке и False - в противном случае.
Вызовите эту функцию для введенной строки s:
s = input()
Input:  abrakadabra
Output: True
"""
s = input()

res = lambda st: 'ra' in st
print(res(s))


"""
В программе задана функция filter_lst (см. программу ниже), 
которая отбирает элементы, переданного ей итерируемого объекта и возвращает сформированный кортеж значений.

На вход программы поступает список целых чисел, записанных в одну строчку через пробел. 
Вызовите функцию filter_lst для формирования:

- кортежа из всех значений входного списка (передается в параметр it);
- кортежа только из отрицательных чисел;
- кортежа только из неотрицательных чисел (то есть, включая и 0);
- кортежа из чисел в диапазоне [3; 5]

Каждый результат работы функции следует отображать с новой строки командой:
print(*lst)
где lst - список на возвращенный функцией filter_lst. 
Для отбора нужных значений формальному параметру key следует передавать соответствующие определения анонимной функции.
Input:  5 4 -3 4 5 -24 -6 9 0
Output: 5 4 -3 4 5 -24 -6 9 0
        -3 -24 -6
        5 4 4 5 9 0
        5 4 4 5
"""


def filter_lst(it, key=None):
    if key is None:
        return tuple(it)

    res = ()
    for x in it:
        if key(x):
            res += (x,)

    return res


# ls_num = list(map(int, input().split()))
ls_num = tuple(map(int, input().split()))
lst_1 = filter_lst(ls_num)
lst_2 = filter_lst(ls_num, lambda n: n < 0)
lst_3 = filter_lst(ls_num, lambda n: n >= 0)
lst_4 = filter_lst(ls_num, lambda n: 2 < n < 6)

print(*lst_1)
print(*lst_2)
print(*lst_3)
print(*lst_4)
