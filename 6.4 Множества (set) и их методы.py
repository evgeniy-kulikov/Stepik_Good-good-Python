# 6.4 Множества (set) и их методы
""""""

# Задать множество
s1 = {1, 2, True, "hello"}
type(s1)  # <class 'set'>

# Задать пустое множество
s2 = set()

s3 = {i ** 2 for i in range(10)}  # генератор множеств
# {0, 1, 4, 81, 64, 9, 16, 49, 25, 36}

s4 = set([5, 6, 7, 7, 7])  # {5, 6, 7}

a = {}  # А так нельзя!
type(a)  # <class 'dict'>

# Элементами множества могут быть только неизменяемые типы данных.
s5 = {1, 2, True, "hello", (2, True, "hello")}
# А так нельзя!
s6 = {[1, True], {1, "hello"}, {3: "False"}}

# Множество - "контейнер", содержащий не повторяющиеся элементы в случайном порядке.
s7 = set('hello')  # {'h', 'o', 'l', 'e'}

"""
С множествами можно выполнять множество операций: находить объединение, пересечение...

len(s) - число элементов в множестве (размер множества).
x in s - принадлежит ли x множеству s.
set.isdisjoint(other) - истина, если set и other не имеют общих элементов.
set == other - все элементы set принадлежат other, все элементы other принадлежат set.
set.issubset(other) или set <= other - все элементы set принадлежат other.
set.issuperset(other) или set >= other - аналогично.
set.union(other, ...) или set | other | ... - объединение нескольких множеств.
set.intersection(other, ...) или set & other & ... - пересечение.
set.difference(other, ...) или set - other - ... - множество из всех элементов set, не принадлежащие ни одному из other.
set.symmetric_difference(other); set ^ other - множество из элементов, встречающихся в одном множестве, но не встречающиеся в обоих.
set.copy() - копия множества.
"""


"""
И операции, непосредственно изменяющие множество:

set.add() - добавить элемент
set.update() - добавить группу элементов 

set.add(elem) - добавляет элемент в множество.
set.remove(elem) - удаляет элемент из множества. KeyError, если такого элемента не существует.
set.discard(elem) - удаляет элемент, если он находится в множестве.
set.clear() - очистка множества.
set.pop() - удаляет первый элемент из множества. KeyError, если такого элемента не существует. 
Так как множества не упорядочены, нельзя точно сказать, какой элемент будет первым.


set.update(other, ...); set |= other | ... - объединение.
set.intersection_update(other, ...); set &= other & ... - пересечение.
set.difference_update(other, ...); set -= other | ... - вычитание.
set.symmetric_difference_update(other); set ^= other - множество из элементов, встречающихся в одном множестве, но не встречающиеся в обоих.
"""



#  *   *   *   *   *   TASK    *   *   *   *   *

"""
Вводятся вещественные числа в одну строчку через пробел. 
Необходимо на их основе сформировать множество s
и вывести его в отсортированном виде
Input:  -5.1 -3.0 7.6 10.3 -4.6 2.78
Output: -5.1 -4.6 -3.0 2.78 7.6 10.3
"""
lst = list(map(float, input().split()))
s = set(lst)
print(*sorted(s))

# короче
s = set(map(float, input().split()))
print(*sorted(s))


"""
Вводится текст в одну строку, слова разделены пробелом. 
Необходимо подсчитать число уникальных слов (без учета регистра) в этом тексте. 
Результат (число уникальных слов) вывести на экран.
Input:  Мама мыла раму а потом мыла кота и еще мыла пол
Output: 9
"""
s = set(map(str, input().lower().split()))
print(len(s))

# короче
s = set(input().lower().split())
print(len(s))


"""
Вводится строка, содержащая латинские символы, пробелы и цифры. 
Необходимо выделить из нее все неповторяющиеся цифры (символы от 0 до 9) и 
вывести на экран в одну строку через пробел их в порядке возрастания значений. 
Если цифры отсутствуют, то вывести слово НЕТ
Input:  Python 3.9.11 - best language!
Output: 1 3 9
"""
s = input()
d = set()
s = s.replace(" ", "")
for el in s:
    if el.isdigit():
        d.add(int(el))

if len(d):
    print(*sorted(d))
else:
    print("НЕТ")

# короче
d = set(int(i) for i in input() if i.isdigit())
print(*sorted(d) if d else ["НЕТ"])


"""
Фиксируется список гостей. Причем гости могут выходить из помещения, а затем, снова заходить. 
Тогда их имена фиксируются повторно. 
На вход программы поступает такой список (каждое имя записано с новой строки). 
Требуется подсчитать общее число гостей, которые посетили ночной клуб. 
Полагается, что гости имеют уникальные имена. На экран вывести общее число гостей клуба.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Input:  Мария
        Елена
        Екатерина
        Александр
        Елена
        Мария
Output: 4
"""
import sys
lst_in = list(map(str.strip, sys.stdin.readlines()))
# lst_in = ['Мария', 'Елена', 'Екатерина', 'Александр', 'Елена', 'Мария']
print(len(set(el for el in lst_in)))



"""
В аккаунте Сергея прокомментировали его очередной пост. 
Некоторые посетители оставляли несколько комментариев. 
Требуется по списку комментариев определить уникальное число комментаторов. 
Комментарии поступают на вход программы в формате:
имя 1: комментарий 1
имя 2: комментарий 2
...
имя N: комментарий N

Также полагается, что имена у разных комментаторов не совпадают. Вывести на экран общее число уникальных комментаторов.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Input:  EvgeniyK: спасибо большое!
        LinaTroshka: лайк и подписка!
        Sergey Karandeev: крутое видео!
        Евгений Соснин: обожаю
        EvgeniyK: это повтор?
        Sergey Karandeev: нет, это новое видео
Output: 4
"""

# lst_in = ['EvgeniyK: спасибо большое!', 'LinaTroshka: лайк и подписка!', 'Sergey Karandeev: крутое видео!',
#           'Евгений Соснин: обожаю', 'EvgeniyK: это повтор?', 'Sergey Karandeev: нет, это новое видео']
import sys
lst_in = list(map(str.strip, sys.stdin.readlines()))
s = [el.split(": ")[0] for el in lst_in]
print(len(set(s)))



"""
Пользователь с клавиатуры вводит названия городов, пока не введет букву q. 
Определить общее уникальное число городов, которые вводил пользователь. 
На экран вывести это число. 
Из коллекций при реализации программы использовать только множества.
Input:  Уфа
        Москва
        Тверь
        Екатеринбург
        Томск
        Уфа
        Москва
        q
Output: 5
"""
s = set()
while True:
    el = input()
    if el == "q":
        break
    s.add(el)
print(len(s))


# чуть короче
s = set()
el = input(),
while el != "q":
    s.add(el)
    el = input()
print(len(s))

# Если ты очень умный )))
# https://docs-python.ru/tutorial/vstroennye-funktsii-interpretatora-python/funktsija-iter/
s = set(iter(input, 'q'))
print(len(s))
