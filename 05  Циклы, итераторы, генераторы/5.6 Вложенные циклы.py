import sys

# 5.6 Вложенные циклы

"""
Вводится натуральное число N (то есть, положительное, целое).
Требуется создать двумерный (вложенный) список размером N x N элементов, состоящий из всех единиц,
а затем, в последний столбец записать пятерки. Вывести этот список на экран в виде таблицы чисел.
P.S. Будьте внимательны в конце строк пробелов быть не должно!
Sample Input:   4
Sample Output:
1 1 1 5
1 1 1 5
1 1 1 5
1 1 1 5
"""
num = int(input())
for k in range(num):
    for m in range(num - 1):
        print(1, end=' ')
    print(5)


"""
Вводится список из URL-адресов (каждый с новой строки). 
Требуется в них заменить все пробелы на символ дефиса (-). 
Следует учесть, что может быть несколько подряд идущих пробелов. 
Результат преобразования вывести на экран в виде строк из URL-адресов.
"""
# import sys
# считывание списка из входного потока
lst_in = list(map(str.strip, sys.stdin.readlines()))
for el in lst_in:
    lst_out = "-".join(el.split())
    print(lst_out)

# варианты решения
# import sys
# считывание списка из входного потока
lst_in = list(map(str.strip, sys.stdin.readlines()))
for el in lst_in:
    while '  ' in el:
        el = el.replace('  ', ' ')
    el = el.replace(' ', '-')    
    print(el)


"""
Вводится натуральное число n. Необходимо найти все простые числа, 
которые меньше этого числа n, то есть, в диапазоне [2; n). 
Результат вывести на экран в строчку через пробел.
"""
num = int(input())
for el in range(2, num):
    cnt = 0
    for i in range(2, el):
        if el % i == 0:
            cnt += 1
    if cnt == 0:
        print(el, end=' ')

# 1) без счетчика cnt. 2) break для исключения лишних итераций
num = int(input())
for el in range(2, num):
    for i in range(2, el // 2 + 1):  # (el // 2 + 1) - если делителя нет в первой половине численного ряда, то во второй уже можно не проверять
        if el % i == 0:
            break
    else:
        print(el, end=' ')


"""
Вводится двумерный список размерностью 5 х 5 элементов, состоящий из нулей и, в некоторых позициях, единиц .
Требуется проверить, не касаются ли единицы друг друга по горизонтали, вертикали и диагонали. 
То есть, вокруг каждой единицы должны быть нули. Если проверка проходит вывести ДА, иначе - НЕТ.
Sample Input:
    1 0 0 0 0
    0 0 1 0 1
    0 0 0 0 0
    0 1 0 1 0
    0 0 0 0 0
Sample Output:  ДА
"""
# import sys
# считывание списка из входного потока
# lst_in = [[1, 0, 0, 0, 0], [0, 0, 1, 0, 1], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0]]  # ДА
s = sys.stdin.readlines()
lst_in = [list(map(int, x.strip().split())) for x in s]
flag = True
for i in range(len(lst_in) - 1):
    for k in range(len(lst_in[i]) - 1):
        # Проверка по сумме "0" и "1" каждого квадрата 2х2
        if lst_in[i][k] + lst_in[i][k + 1] + lst_in[i + 1][k] + lst_in[i + 1][k + 1] > 1:
            flag = False
            break
print('ДА' if flag else 'НЕТ')


"""
Вводится двумерный список размерностью 5 х 5 элементов, состоящий из целых чисел (пример ввода см. ниже). 
Проверьте, является ли этот двумерный список симметричным относительно главной диагонали. 
Главная диагональ — та, которая идёт из левого верхнего угла двумерного массива в правый нижний. 
Выведите на экран ДА, если матрица симметрична и НЕТ - в противном случае.
Sample Input:
    2 3 4 5 6
    3 2 7 8 9
    4 7 2 0 4
    5 8 0 2 1
    6 9 4 1 2
Sample Output:  ДА
"""
# import sys
# считывание списка из входного потока
# lst_in = [[2, 3, 4, 5, 6], [3, 2, 7, 8, 9], [4, 7, 2, 0, 4], [5, 8, 0, 2, 1], [6, 9, 4, 1, 2]]
s = sys.stdin.readlines()
lst_in = [list(map(int, x.strip().split())) for x in s]
flag = True
for i in range(len(lst_in)):
    for k in range(i + 1, len(lst_in)):
        if lst_in[i][k] != lst_in[k][i]:
            flag = False
            break
print('ДА' if flag else 'НЕТ')


"""
Вводится список целых чисел в одну строку через пробел.
Необходимо выполнить его сортировку выбором по возрастанию.
Реализовать идею алгоритма сортировки выбором.
Input:   8 11 -53 2 10 11
Output:  -53 2 8 10 11 11
"""

s = list(map(int, input().split()))
# s = [8, 11, -53, 2, 10, 11]
for i in range(len(s) - 1):
    min_n = s[i]  # текущее минимальное значение списка
    min_i = i  # индекс текущего минимального значения
    for k in range(i + 1, len(s)):   # поиск минимального значения в ПРАВОЙ части списка
        if min_n > s[k]:  # если находится значение меньше, то
            min_n = s[k]  # меняем минимальное значение
            min_i = k  # меняем индекс минимального значения
    if min_i != i:  # если индексы не равны (нашлось меньшее значение), то делаем обмен значениями
        tmp_n = s[i]  # организуем временное хранение последнего меньшего значения ЛЕВОЙ части списка
        s[i] = s[min_i]
        s[min_i] = tmp_n
print(*s)

# другие решения
s = list(map(int, input().split()))
# s = [8, 11, -53, 2, 10, 11]
for i in range(len(s) - 1):
    min_i = i  # индекс текущего минимального значения
    for k in range(i + 1, len(s)):
        if s[min_i] > s[k]:
            min_i = k  # меняем индекс минимального значения
    if min_i != i:  # если индексы не равны (нашлось меньшее значение), то делаем обмен значениями
        s[i], s[min_i] = s[min_i], s[i]
print(*s)


"""
Вводится список целых чисел в одну строку через пробел. 
Необходимо выполнить его сортировку по возрастанию методом всплывающего пузырька.
Input:   4 5 2 0 6 3 -56 3 -1
Output:  -56 -1 0 2 3 3 4 5 6
"""
s = list(map(int, input().split()))
# s = [4, 5, 2, 0, 6, 3, -56, 3, -1]
for i in range(len(s) - 1):
    for k in range(len(s) - 1 - i):  # "- i" сокращаем обходы
        if s[k] > s[k + 1]:
            s[k], s[k + 1] = s[k + 1], s[k]
print(*s)


"""
Используются денежные купюры достоинством в 1, 2, 4, 8, 16, 32 и 64. 
Вводится натуральное число n. 
Как наименьшим количеством таких денежных купюр можно выплатить сумму n? 
Вывести на экран список купюр для формирования суммы n (в одну строчку через пробел, 
начиная с наибольшей и заканчивая наименьшей). 
Предполагается, что имеется достаточно большое количество купюр всех достоинств.
Input:   221
Output:  64 64 64 16 8 4 1
"""
n = int(input())
# n = 221
cash = [64, 32, 16, 8, 4, 2, 1]
for i in range(len(cash)):
    while n // cash[i] != 0:
        n -= cash[i]
        print(cash[i], end=' ')
