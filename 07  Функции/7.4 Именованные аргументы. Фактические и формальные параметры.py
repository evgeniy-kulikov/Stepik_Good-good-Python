# 7.4 Именованные аргументы. Фактические и формальные параметры
""""""

"""
Объявите функцию с именем get_rect_value, 
которая принимает два аргумента (два числа) и еще один формальный параметр type с начальным значением 0. 
Если параметр type равен нулю, то функция должна возвращать периметр прямоугольника, а иначе - его площадь.
"""

def get_rect_value(a, b, type=0):
    if type == 0:
        return 2 * (a + b)
    return a * b


"""
Объявите функцию с именем check_password, 
которая принимает аргумент - строку (пароль) 
и имеет один формальный параметр chars с начальным значением в виде строки "$%!?@#". 
Функция должна проверять: 
есть ли в пароле хотя бы один символ из chars и что длина пароля не менее 8 символов. 
Если проверка проходит, то функция возвращает True, иначе - False.
"""

def check_password(str_in, chars="$%!?@#"):
    if len(str_in) > 7:
        for item in str_in:
            if item in chars:
                return True
    return False

# Через множества
def check_password(str_in, chars="$%!?@#"):
    if len(str_in) > 7:
        if not set(str_in).isdisjoint(set(chars)):
        # len(set(chars) & set(str_in)) > 0:
            return True
    return False


"""
Объявите функцию, которая принимает строку на кириллице и преобразовывает ее в латиницу, используя словарь.
Функция должна возвращать преобразованную строку. Замены делать без учета регистра 
(исходную строку перевести в нижний регистр - малые буквы). 
У функции также определить формальный параметр sep с начальным значением в виде строки "-". 
Он будет определять символ для замены пробелов в строке.
После объявления функции прочитайте (с помощью функции input) строку и дважды вызовите функцию 
с выводом результата ее работы на экран:
- первый раз только со строкой
- второй раз со строкой и именованным аргументом sep со значением '+'.

Input:  Лучший курс по Python!
Output: luchshiy-kurs-po-python!
        luchshiy+kurs+po+python!
"""
t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
     'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
     'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
     'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}

def translate(st_in, sep='-'):
    s = st_in.lower()
    st_out = ''
    for item in s:
        st_out += t.get(item, item)
    new_st = st_out.replace(' ', sep)

    return new_st


# Вариант
def translate(st_in, sep='-'):
    s = st_in.lower()
    new_st = ''.join([(sep if item == ' ' else t.get(item, item)) for item in s])

    return new_st


# string_in = 'Лучший курс по Python!'
string_in = input()
w = translate(string_in)
w2 = translate(string_in, '+')
print(w)
print(w2)


"""
Объявите функцию, которая принимает строку и заключает ее в указанный тег. 
Тег определяется формальным параметров tag с начальным значением в виде строки "h1". 
Например, мы передаем строку "Hello Python" и заключаем в тег "h1". На выходе должны получить строку (без кавычек):
"<h1>Hello Python</h1>"
То есть, сначала открывается тег <h1>, а в конце строки - закрывается </h1>. И так для любых указанных тегов.
После объявления функции прочитайте (с помощью функции input) строку 
и дважды вызовите функцию (с выводом результата ее работы на экран):
- первый раз только со строкой
- второй раз со строкой и именованным аргументом tag со значением 'div'.

Input:  Работаем с функциями
Output: <h1>Работаем с функциями</h1>
        <div>Работаем с функциями</div>
"""

def get_tag(st, tag='h1'):
    return f'<{tag}>{st}</{tag}>'


st_in = input()
w = get_tag(st_in)
w2 = get_tag(st_in, 'div')
print(w)
print(w2)


"""
Функции из предыдущего решения добавьте еще один формальный параметр 'up' с начальным булевым значением True. 
Если параметр up равен True, то тег (указанный в формальном параметре tag) следует записывать 
заглавными буквами, а иначе - малыми.
После объявления функции прочитайте (с помощью функции input) строку и дважды вызовите функцию 
(с выводом результата ее работы на экран):
- первый раз со строкой и именованным аргументом tag со значением 'div'
- второй раз со строкой, именованным аргументом tag со значением 'div' и именованным аргументом up со значением False.
Input:  Python is best!
Output: <DIV>Python is best!</DIV>
        <div>Python is best!</div>
"""

def get_tag(st, tag='div', up=True):
    tag = tag.upper() if up else tag
    return f'<{tag}>{st}</{tag}>'



# st_in = input()
st_in = 'Python is best!'
w = get_tag(st_in)
w2 = get_tag(st_in, up=False)
print(w)
print(w2)


