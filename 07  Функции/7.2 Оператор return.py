# 7.2 Оператор return
""""""

"""
Объявите функцию, которая принимает один аргумент (вещественное число), и возвращает квадрат этого числа. 
После объявления функции прочитайте (с помощью функции input) вещественное число и вызовите функцию с этим значением.
Input:  1.5
Output: 2.25
"""
def get_square(num: float):
    return num * num


num = float(input())
rez = get_square(num)
print(rez)


"""
Объявите функцию с именем is_triangle, 
которая принимает три стороны треугольника (целые числа) и проверяет, 
можно ли из переданных аргументов составить треугольник. 
(У любого треугольника длина третьей стороны всегда должна быть меньше суммы двух других). 
Если  проверка проходит, вернуть булево значение True, иначе - значение False.
Input:  3 4 5
Output: True
"""
def is_triangle(a, b, c: int):
    rez = sum([a, b, c]) - max(a, b, c) * 2
    return rez > 0


a, b, c = map(int, input().split())
rez = is_triangle(a, b, c)
print(rez)


# Вариант
def is_triangle(a, b, c):
    a, b, c = sorted((a, b, c))  # во внутренних скобках кортеж
    return c < a + b


"""
Объявите функцию с именем is_large, 
которая принимает строку (в качестве аргумента) и 
возвращает False, если длина строки меньше трех символов. 
Иначе возвращается значение True.
Input:  Я люблю Python!
Output: True
"""
def is_large(st: str):
    return len(st) > 2


"""
Объявите функцию для проверки числа на четность:
возвращается True, если переданное число четное и False, если число нечетное.
После объявления функции в цикле необходимо считывать целое числовое значение (функцией input), 
пока не поступит число 1. 
Если прочитанное значение четное (проверяется с помощью заданной функции), 
то оно выводится на экран (в столбик, то есть, каждое значение с новой строки).
Input:  2
        -4
        7
        10
        1
Output: 2
        -4
        10
"""
def get_even(num: int) -> bool:
    return num % 2 == 0


while True:
    n = int(input())
    if n == 1:
        break
    if get_even(n):
        print(n)

# Короче
# Моржа при сравнении надо брать в скобки !!!
while (n := int(input())) != 1:
    if get_even(n):
        print(n)


"""
Объявите функцию для проверки числа на нечетность:
возвращается True, если переданное число нечетное и False, если число четное. 
После объявления функции прочитайте (с помощью функции input) список целых значений, 
записанных в одну строку через пробел. 
И, используя генератор списков и созданную функцию, 
сформируйте список из нечетных значений на основе введенного исходного списка.
Input:  8 11 -15 3 2 10
Output: 11 -15 3
"""

def get_not_even(num: int) -> bool:
    return num % 2 != 0


ls = list(map(int, input().split()))
lst = [item for item in ls if get_not_even(item)]
print(*lst)


"""
Вводится слово в переменную tp. Если это слово RECT,
то следует объявить функцию с именем get_sq с двумя параметрами, 
вычисляющую площадь прямоугольника и возвращающую вычисленное значение.
(На экран она ничего не должна выводить, только возвращать значение).

Если же введенное слово не RECT (любое другое), 
то объявляется функция с тем же именем get_sq, 
с одним параметром для вычисления площади квадрата (формула: a*a). 
Вычисленное значение возвращается функцией. (Она также ничего не выводит на экран).
Input:  RECT
Output: 10
"""
tp = input().strip()


def get_sq(a, b=None):
    if tp == 'RECT':
        return a * b
    return a * a


# Вариант
if tp == "RECT":
    def get_sq(a, b):
        return a * b
else:
    def get_sq(a):
        return a * a



"""
Объявите функцию, которая принимает строку (в качестве аргумента) и возвращает False, 
если длина строки меньше 6 символов. Иначе возвращается значение True.
После объявления функции прочитайте (с помощью функции input) список названий городов, 
записанных в одну строку через пробел. Затем, используя генератор списка и созданную функцию, 
сформируйте список из названий городов длиной не менее шести символов на основе введенного исходного списка. 
Результат отобразите на экране.
Input:  Москва Уфа Пермь Самара Вологда
Output: Москва Самара Вологда
"""
s_in = input()

def get_len(st):
    if len(st) < 6:
        return False
    return True

# Короче
def get_len(st):
    return len(st) > 5

rez = [el for el in s_in.split() if get_len(el)]
print(*rez)

print(s_in.split())


"""
Объявите функцию, которая принимает строку (в качестве аргумента) и 
возвращает два значения в виде кортежа: переданная строка и ее длина.
После объявления функции прочитайте (с помощью функции input) список названий городов, 
записанных в одну строку через пробел. 
Затем, используя генератор словарей и созданную функцию, сформируйте словарь d в формате:
d = {<город 1>: <число символов>, ..., <город N>: <число символов>}
Выведите этот словарь в порядке возрастания длин строк с помощью команд:
a = sorted(d, key=lambda x: d[x])
print(*a)
Input:  Воронеж Лондон Тверь Омск Уфа
Output: Уфа Омск Тверь Лондон Воронеж
"""
s_in = input()

def get_tuple(st):
    return st, len(st)

d = {get_tuple(el)[0]: get_tuple(el)[1] for el in s_in.split()}
# Короче
d = dict(get_tuple(el) for el in input().split())

a = sorted(d, key=lambda x: d[x])
print(*a)


"""
Вводится список целых чисел в одну строчку через пробел. 
Необходимо задать функцию, которая принимает два аргумента 
(максимальное и минимальное значения из списка) и возвращает их произведение. 
Вызовите эту функцию и отобразите на экране полученное числовое значение.
Input:  56 34 -30 22 1 4 10
Output: -1680
"""
ls_in = list(map(int, input().split()))
max_num = max(ls_in)
min_num = min(ls_in)

def get_multiply(a, b):
    return a * b

print(get_multiply(max_num, min_num))


# Короче 1
ls_in = list(map(int, input().split()))

def get_multiply(*args):
    return max(ls_in) * min(ls_in)

print(get_multiply())


# Короче 2
ls_in = list(map(int, input().split()))

def get_multiply(ls):
    return max(ls) * min(ls)

print(get_multiply(ls_in))
