# 9.5 Функция zip
""""""

#
#  *   *   *   *   *   TASK    *   *   *   *   *
#

# 01
"""
Вводятся два списка целых чисел. Необходимо попарно перебрать их элементы и перемножить между собой. 
Выведите на экран первые три значения.
Input:  -7 8 11 -1 3
         1 2 3 4 5 6 7 8 9 10
Output: -7 16 33
"""
ls1, ls2 = map(int, input().split()), map(int, input().split())
res = (a * b for a, b in zip(ls1, ls2))
for _ in range(3):
    print(next(res), end=' ')

# Вариант
ls1, ls2 = map(int, input().split()), map(int, input().split())
res = map(lambda a: a[0] * a[1], zip(ls1, ls2))
for _ in range(3):
    print(next(res), end=' ')

# Вариант (без zip)
ls1, ls2 = map(int, input().split()), map(int, input().split())
res = map(lambda a, b: a * b, ls1, ls2)
for _ in range(3):
    print(next(res), end=' ')

# Вариант (без next)
ls1, ls2 = map(int, input().split()), map(int, input().split())
res = [a * b for a, b in list(zip(ls1, ls2))[:3]]
print(*res)


# 02
"""
Вводится неравномерная таблица целых чисел. 
С помощью функции zip выровнить эту таблицу, приведя ее к прямоугольному виду, отбросив выходящие элементы. 
Input:  1 2 3 4 5 6
        3 4 5 6
        7 8 9
        9 7 5 3 2
Output: 1 2 3
        3 4 5
        7 8 9
        9 7 5
"""
import sys
# считывание списка из входного потока
lst_in = list(map(str.strip, sys.stdin.readlines()))
# lst_in = ['1 2 3 4 5 6', '3 4 5 6', '7 8 9', '9 7 5 3 2']

# Вариант
import sys
# считывание списка из входного потока
lst_in = list(map(str.strip, sys.stdin.readlines()))
# происходит двойное транспонирование матрицы
res = zip(*zip(*(el.split() for el in lst_in)))

for el in res:
    print(*el)

# Короче
# lst_in = ['1 2 3 4 5 6', '3 4 5 6', '7 8 9', '9 7 5 3 2']
res = zip(*zip(*lst_in))
for el in res:
    print(''.join(el))  # print(el)  # ('1', ' ', '2', ' ', '3')


# 03
"""
Вводится таблица целых чисел. 
Необходимо сначала эту таблицу представить двумерным списком чисел, 
а затем, с помощью функции zip выполнить транспонирование этой таблицы 
(то есть, строки заменить на соответствующие столбцы). 
Результат вывести на экран в виде таблицы чисел (числа в строках следуют через пробел).
Input:  1 2 3 4
        5 6 7 8
        9 8 7 6
Output: 1 5 9
        2 6 8
        3 7 7
        4 8 6
"""
import sys
# считывание списка из входного потока
lst_in = list(map(str.strip, sys.stdin.readlines()))
# lst_in = ['1 2 3 4', '5 6 7 8', '9 8 7 6']

ls_2d = [el.split() for el in lst_in]  # [['1', '2', '3', '4'], ['5', '6', '7', '8'], ['9', '8', '7', '6']]

# str --> int
for row in range(len(ls_2d)):
    for col in range(len(ls_2d[row])):
        ls_2d[row][col] = int(ls_2d[row][col])

res = zip(*ls_2d)

for el in res:
    print(*el)


# Вариант (сразу создаем двумерный список из чисел)
ls_2d = [(map(int, el.split())) for el in lst_in]

res = list(zip(*ls_2d))

for el in res:
    print(*el)


# 03
"""
Вводится строка из слов, записанных через пробел. 
Необходимо на их основе составить прямоугольную таблицу из трех столбцов и N строк 
(число строк столько, сколько получится). 
Лишнее (выходящее) слово - отбросить. 
Реализовать эту программу с использованием функции zip. 
Результат отобразить на экране в виде прямоугольной таблицы из слов, записанных через пробел (в каждой строчке).
Input:  Москва Уфа Тула Самара Омск Воронеж Владивосток Лондон Калининград Севастополь
Output: Москва Уфа Тула
        Самара Омск Воронеж
        Владивосток Лондон Калининград
"""
city = input().split()
# city = ['Москва', 'Уфа', 'Тула', 'Самара', 'Омск', 'Воронеж', 'Владивосток', 'Лондон', 'Калининград', 'Севастополь']

# Каждый поток ls при работе zip() уменьшается на один элемент, т.к. ls это итератор (проход по нему только один раз)
ls = iter(city)
res = zip(ls, ls, ls)
for el in res:
    print(*el)

# Вариант через срезы
res = zip(city[::3], city[1::3], city[2::3])
for el in res:
    print(*el)


# 04
"""
Вводится строка. Требуется, используя введенную строку, сформировать N=10 пар кортежей в формате:
(символ, порядковый индекс)
Первый индекс имеет значение 0. 
Строка может быть короче 10 символов, а может быть и длиннее. 
То есть, число пар может быть 10 и менее. 
Используя функцию zip сформируйте указанные кортежи и сохраните в список с именем lst.
Input:  Python дай мне силы пройти этот курс до конца!
Output: True
"""
# считывание строки в переменную s (эту переменную в программе не менять)
# s = 'Python дай мне силы пройти этот курс до конца!'

s = input()
num = [el[0] for el in enumerate(s)]
lst = list(zip(s, num))[:10]


# Короче
lst=list(zip(s, range(10)))