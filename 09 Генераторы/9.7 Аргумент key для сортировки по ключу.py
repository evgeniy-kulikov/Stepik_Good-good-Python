# 9.7 Аргумент key для сортировки по ключу
""""""

# Штатное поведение функции sorted()
a = [4, 3, -10, 1, 7, 12]
b = sorted(a)  # [-10, 1, 3, 4, 7, 12]


# Применим ключ для сортировки по другим параметрам
"""
Фактически сортировка происходит по "нулю" и "большему значению"
"""
def id_odd(x):
    return x % 2


# Добавляем ключ на основе функции id_odd()
# Сначала идут четные значения, потом нечетные
a = [4, 3, -10, 1, 7, 12]
b = sorted(a, key=id_odd)  # [4, -10, 12, 3, 1, 7]


# Сразу в ключе формируем функцию lambda
b = sorted(a, key=lambda x: x % 2)  # [4, -10, 12, 3, 1, 7]


# метод sort ведет себя аналогично
a = [4, 3, -10, 1, 7, 12]
a.sort(key=lambda x: x % 2)  # [4, -10, 12, 3, 1, 7]


# Более сложные правила сортировки
# 1 - Разделим четные и нечетные значения, а так же отсортируем каждую из этих групп
def key_sort(x):
    return x if x % 2 == 0 else 100 + x

a = [4, 3, -10, 1, 7, 12]
b = sorted(a, key=key_sort)  # [-10, 4, 12, 1, 3, 7]

# Такой же эффект: сразу в ключе формируем функцию lambda.
# Дальше начинает сравниваться кортеж (x % 2, x)
# А кортежи в Python сравниваются по первому элементу. При одинаковом первом - сравнивается второй и т.д..
a = [4, 3, -10, 1, 7, 12]
b = sorted(a, key=lambda x: (x % 2, x))  # [-10, 4, 12, 1, 3, 7]

# 2 - Сортировка строковых значений
lst = ["Москва", "Тверь", "Смоленск", "Псков", "Рязань"]

# Сортировка по длине строки
b = sorted(lst, key=len)  # ['Тверь', 'Псков', 'Москва', 'Рязань', 'Смоленск']


# Сортировка по последнему символу строки
b = sorted(lst, key=lambda x: x[-1])  # ['Москва', 'Псков', 'Смоленск', 'Тверь', 'Рязань']


# Сортировка по первому символу строки
b = sorted(lst, key=lambda x: x[0])  # ['Москва', 'Псков', 'Рязань', 'Смоленск', 'Тверь']


#  Сортировка кортежей
books = (
    ("Евгений Онегин", "Пушкин А. С.", 200),
    ("Муму", "Тургенев И. С", 250),
    ("Мастер и Маргарита", "Булгаков М. А.", 500),
    ("Мертвые души", "Гоголь Н. В.", 190)
)

# Сортировка книг по цене
b = sorted(books, key=lambda x: x[-1])
# [('Мертвые души', 'Гоголь Н. В.', 190),
# ('Евгений Онегин', 'Пушкин А. С.', 200),
# ('Муму', 'Тургенев И. С', 250),
# ('Мастер и Маргарита', 'Булгаков М. А.', 500)]


# Аргумент key используется для управления сортировкой элементов произвольных коллекций данных


#
#  *   *   *   *   *   TASK    *   *   *   *   *
#


# 01
"""
На вход программы поступает список наименований рек, записанных в одну строчку через пробел. 
Необходимо отсортировать этот список в порядке убывания длин названий. 
Input:  Лена Енисей Волга Дон
Output: Енисей Волга Лена Дон
"""
s = input().split()
# ['Лена', 'Енисей', 'Волга', 'Дон']

res = sorted(s, key=len, reverse=True)
# ['Енисей', 'Волга', 'Лена', 'Дон']
print(*res)

# Вариант
res = sorted(s, key=lambda x: -len(x))
print(*res)


# 02
"""
На вход программы поступает строка в формате:
предмет_1=вес_1
...
предмет_N=вес_N
Веса предметов заданы целыми числами. Необходимо на основе этих данных сформировать словарь 
и, затем, на основе этого словаря сформировать список предметов по убыванию их веса. 
(В списке должны находиться только наименования предметов без их весов).
Input:  ножницы=100
        котелок=500
        спички=20
        зажигалка=40
        зеркальце=50
Output: котелок ножницы зеркальце зажигалка спички
"""
import sys
# считывание списка из входного потока
lst_in = list(map(str.strip, sys.stdin.readlines()))
# lst_in = ['ножницы=100', 'котелок=500', 'спички=20', 'зажигалка=40', 'зеркальце=50']

d_in = {key: int(val) for key, val in [x.split('=') for x in lst_in]}
# {'ножницы': 100, 'котелок': 500, 'спички': 20, 'зажигалка': 40, 'зеркальце': 50}

res = sorted(d_in, key=lambda x: d_in.get(x), reverse=True)
# ['котелок', 'ножницы', 'зеркальце', 'зажигалка', 'спички']
print(*res)


# 03
"""
На вход программы поступает строка с набором нот, записанных через пробел. 
Необходимо сформировать список из входной строки с нотами, 
отсортированными указанным образом (порядок нот, следующий: до, ре, ми, фа, соль, ля, си).
Input:  до фа соль до ре фа ля си
Output: до до ре фа фа соль ля си
"""
note = ['до', 'ре', 'ми', 'фа', 'соль', 'ля', 'си']
ls_in = input().split()
# ['до', 'фа', 'соль', 'до', 'ре', 'фа', 'ля', 'си']

res = sorted(ls_in, key=lambda el: note.index(el))
# ['до', 'до', 'ре', 'фа', 'фа', 'соль', 'ля', 'си']
print(*res)

# Короче
note = ['до', 'ре', 'ми', 'фа', 'соль', 'ля', 'си']
ls_in = input().split()
res = sorted(ls_in, key=note.index)
print(*res)

# Вариант со словарем
d = {'до': 0, 'ре': 1, 'ми': 2, 'фа': 3, 'соль': 4, 'ля': 5, 'си': 6}
ls_in = input().split()
res = sorted(ls_in, key=lambda el: d[el])
print(*res)


# 04
"""
Имеется таблица с данными, представленная в формате:
Номер;Имя;Оценка;Зачет
1;Иванов;3;Да
2;Петров;2;Нет
...
N;Балакирев;4;Да

Эти данные необходимо представить в виде двумерного (вложенного) кортежа. 
Все числа должны быть представлены как целые числа. 
Затем, отсортировать данные так, чтобы столбцы шли в порядке:
Имя;Зачет;Оценка;Номер

Результат должен быть представлен также в виде двумерного кортежа и присвоен переменной с именем t_sorted.
Input:  Номер;Имя;Оценка;Зачет
        1;Портос;5;Да
        2;Арамис;3;Да
        3;Атос;4;Да
        4;д'Артаньян;2;Нет
        5;Балакирев;1;Нет

Output: (('Имя', 'Зачет', 'Оценка', 'Номер'), 
        ('Портос', 'Да', 5, 1), 
        ('Арамис', 'Да', 3, 2), 
        ('Атос', 'Да', 4, 3), 
        ("д'Артаньян", 'Нет', 2, 4), 
        ('Балакирев', 'Нет', 1, 5))
"""

# Требуемое решение по теме.
import sys
# считывание списка из входного потока (не меняйте переменную lst_in в программе)
lst_in = list(map(str.strip, sys.stdin.readlines()))
# ['Номер;Имя;Оценка;Зачет', '1;Портос;5;Да', '2;Арамис;3;Да', '3;Атос;4;Да', "4;д'Артаньян;2;Нет", '5;Балакирев;1;Нет']

# Желаемый порядок столбцов
haders = ['Имя', 'Зачет', 'Оценка', 'Номер']
# haders = 'Имя;Зачет;Оценка;Номер'.split(';')

# 2D список из строки ввода + преобразования в числа
step_1 = [list(int(el) if el.isdigit() else el for el in s.split(';')) for s in lst_in]
# Вариант через lambda
# step_1 = [list(map(lambda x: int(x) if x.isdigit() else x, s.split(";"))) for s in lst_in]
"""
[['Номер', 'Имя', 'Оценка', 'Зачет'], 
[1, 'Портос', 5, 'Да'], 
[2, 'Арамис', 3, 'Да'], 
[3, 'Атос', 4, 'Да'], 
[4, "д'Артаньян", 2, 'Нет'], 
[5, 'Балакирев', 1, 'Нет']]
"""
# Транспонирование 2D списка (создаются кортежи)
step_2 = list(zip(*step_1))
"""
[('Номер', 1, 2, 3, 4, 5), 
('Имя', 'Портос', 'Арамис', 'Атос', "д'Артаньян", 'Балакирев'), 
('Оценка', 5, 3, 4, 2, 1), 
('Зачет', 'Да', 'Да', 'Да', 'Нет', 'Нет')]
"""

# Требуемая сортировка по первому элементу в каждом кортеже step_2[<0, 1, 2, 3>][0]
step_3 = sorted(step_2, key=lambda x: haders.index(x[0]))
"""
[('Имя', 'Портос', 'Арамис', 'Атос', "д'Артаньян", 'Балакирев'), 
('Зачет', 'Да', 'Да', 'Да', 'Нет', 'Нет'), 
('Оценка', 5, 3, 4, 2, 1), 
('Номер', 1, 2, 3, 4, 5)]
"""

# Обратное транспонирование 2D списка
t_sorted = tuple(zip(*step_3))
"""
(('Имя', 'Зачет', 'Оценка', 'Номер'), 
('Портос', 'Да', 5, 1), 
('Арамис', 'Да', 3, 2), 
('Атос', 'Да', 4, 3), 
("д'Артаньян", 'Нет', 2, 4), 
('Балакирев', 'Нет', 1, 5))
"""
# print(t_sorted)


# Позорное решение через цикл for
import sys
# считывание списка из входного потока (не меняйте переменную lst_in в программе)
lst_in = list(map(str.strip, sys.stdin.readlines()))
# lst_in = ['Номер;Имя;Оценка;Зачет', '1;Портос;5;Да', '2;Арамис;3;Да', '3;Атос;4;Да', "4;д'Артаньян;2;Нет",
#           '5;Балакирев;1;Нет']

# двухмерный список
ls = [el.split(';') for el in lst_in]

for el in ls[1:]:  # меняем строки на числа
    el[0] = int(el[0])
    el[2] = int(el[2])

for row in range(len(ls)):  # меняем столбцы местами
    ls[row][0], ls[row][1], ls[row][3] = ls[row][1], ls[row][3], ls[row][0]

t_sorted = tuple(tuple(el) for el in ls)
# print(t_sorted)


# 05
"""
звания военнослужащих имеют следующий порядок:
рядовой, сержант, старшина, прапорщик, лейтенант, капитан, майор, подполковник, полковник

На вход поступает список военнослужащих в формате:
имя_1=звание_1
...
имя_N=звание_N

Необходимо входные данные представить в виде вложенного списка вида:
[['имя_1', 'звание_1'], ['имя_2', 'звание_2'], ..., ['имя_N', 'звание_N']]

Этот список присвоить переменной с именем lst. Затем, отсортировать его по возрастанию званий.
Input:  Атос=лейтенант
        Портос=прапорщик
        д'Артаньян=капитан
        Арамис=лейтенант
        Балакирев=рядовой
Output: 
"""
import sys

# считывание списка из входного потока (переменную lst_in не менять)
# lst_in = list(map(str.strip, sys.stdin.readlines()))

# здесь продолжайте программу (используйте список строк lst_in)
lst_in = ['Атос=лейтенант', 'Портос=прапорщик', "д'Артаньян=капитан", 'Арамис=лейтенант', 'Балакирев=рядовой']

rang = ['рядовой', 'сержант', 'старшина', 'прапорщик', 'лейтенант', 'капитан', 'майор', 'подполковник', 'полковник']

ls_2d = [el.split('=') for el in lst_in]
"""
[['Атос', 'лейтенант'], 
['Портос', 'прапорщик'], 
["д'Артаньян", 'капитан'], 
['Арамис', 'лейтенант'], 
['Балакирев', 'рядовой']]
"""

lst = sorted(ls_2d, key=lambda x: rang.index(x[1]))
"""
[['Балакирев', 'рядовой'], 
['Портос', 'прапорщик'], 
['Атос', 'лейтенант'], 
['Арамис', 'лейтенант'], 
["д'Артаньян", 'капитан']]
"""

# print(lst)
