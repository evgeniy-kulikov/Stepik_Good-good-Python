# 10.3 Модуль random стандартной библиотеки
""""""

import random

# Псевдо-случайное число в диапазоне [0.0, ... 1.0)  0.0 <= x < 1
# с равномерным распределением
# генерация вещественных случайных величин
a = random.random()  # 0.5995461806360695


# случайное число в диапазоне от a (включительно) до b (НЕ включительно)
c = random.uniform(a, 10)  # 4.87064221496375


# целочисленное случайное значение
# крайнее левое и крайнее правое числа включается в диапазон
b = random.randint(-3, 7)  # 4


# случайное целое число в диапазоне, опционально с шагом
# random.randrange(start, stop[, step])
a = random.randrange(-3, 10, 2)  # -3, -1, 1, 3, 5 ...
print(a)

# все вышеприведенные функции дают нормальное распределение
# есть возможность получить нормальное (гауссовское) распределение
# в реальном мире многие события подчиняются именно нормальному распределению
# mu - математическое ожидание (среднее значение СВ)
# sigma - среднеквадратичное отклонение (мера разброса относительно математического ожидания)
# функция gauss(mu, sigma)
g = random.gauss(0, 3.5)  # -3.8186671259019525


""" """
# Функции мз модуля random для работы со списками
lst = [4, 5, 0, -1, 10, 76, 3]

# выбор одного элемента случайным образом
a = random.choice(lst)
print(a)  # 76

# shuffle - метод для перемешивания элементов в списке
random.shuffle(lst)  # [10, 76, -1, 0, 3, 4, 5]


# выбор случайных неповторяющихся элементов (подпоследовательности)
# если указать количество элементов больше длины списка, будет ошибка
b = random.sample(lst, 3)  # [10, 76, 3]


# формирование одинаковой последовательности чисел при каждом запуске программы
# контроль генерации псевдо-случайных чисел
random.seed(123)  # установка "зерна" датчика случайных чисел
c = [random.randint(0, 10) for _ in range(10)]  # [0, 6, 1, 9, 6, 1, 0, 5, 7, 1]
c = [random.randint(0, 10) for _ in range(10)]  # [0, 6, 1, 9, 6, 1, 0, 5, 7, 1]



#
#  *   *   *   *   *   TASK    *   *   *   *   *
#


# 01
"""
Вводятся два натуральных числа a, b (a < b) в одну строчку через пробел. 
Выполните генерацию вещественной случайной величины в диапазоне [a; b). 
Округлите результат до сотых 
Input:  -4 5
Output: -2.79
"""
# Для случая, если "b" не входит в диапазон
import random
# установка "зерна" датчика случайных чисел, чтобы получались одни и те же случайные величины
random.seed(1)
a, b = map(int, input().split())
c = a + (b-a) * random.random()
print(round(c, 2))


# Вариант
# Для случая, если "b" включительно
from random import uniform
a, b = map(int, input().split())
c = uniform(a, b)
print(round(c, 2))


# 02
"""
Вводятся два натуральных числа a, b (a < b) в одну строчку через пробел. 
Выполните генерацию целочисленной случайной величины в диапазоне [a; b].
Input:  -2 3
Output: -1
"""
import random
# установка "зерна" датчика случайных чисел, чтобы получались одни и те же случайные величины
random.seed(1)

a, b = map(int, input().split())
c = random.randint(a, b)
print(c)


# 03
"""
Вводится список названий городов в одну строчку через пробел. 
Выберите из этого списка один город случайным образом
Input:  Тула Казань Смоленск Семипалатинск Уфа Москва Самара
Output: Казань
"""
import random
# установка "зерна" датчика случайных чисел, чтобы получались одни и те же случайные величины
random.seed(1)

ls = input().split()
c = random.choice(ls)
print(c)



# 04
"""
Вводится таблица целых чисел, записанных через пробел. 
Необходимо перемешать столбцы этой таблицы, 
используя функции shuffle и zip и вывести результат на экран (также в виде таблицы).
Input:  1 2 3 4
        5 6 7 8
        9 8 6 7
Output: 4 1 3 2
        8 5 7 6
        7 9 6 8
"""
import sys
import random
# установка "зерна" датчика случайных чисел, чтобы получались одни и те же случайные величины
random.seed(1)

# считывание списка из входного потока
lst_in = list(map(str.strip, sys.stdin.readlines()))
# lst_in = ['1 2 3 4', '5 6 7 8', '9 8 6 7']

# здесь продолжайте программу
ls = list(zip(*(el.split() for el in lst_in)))
# [('1', '5', '9'), ('2', '6', '8'), ('3', '7', '6'), ('4', '8', '7')]

random.shuffle(ls)
# [('4', '8', '7'), ('1', '5', '9'), ('3', '7', '6'), ('2', '6', '8')]

res = zip(*ls)

for el in res:
    print(*el)


# 05
"""
Вводятся имена студентов в одну строчку через пробел. 
Требуется случайным образом выбрать трех студентов из этого списка, используя функцию sample. 
(Полагается, что в исходном списке более трех студентов).
Input:  Петров Иванов Сидоров Балакирев Фридман
Output: Иванов Петров Фридман

"""
import random
# установка "зерна" датчика случайных чисел, чтобы получались одни и те же случайные величины
random.seed(1)

# здесь продолжайте программу
lst = input().split()
res = random.sample(lst, 3)
print(*res)


# 06
"""
Имеется двумерное игровое поле размером N x N (N - натуральное число, вводится с клавиатуры), 
представленное в виде вложенного списка:
P = [[0] * N for i in range(N)]
Требуется расставить в нем случайным образом M = 10 единиц (целочисленных) так, 
чтобы они не соприкасались друг с другом (то есть, вокруг каждой единицы должны быть нули, либо граница поля). 
Input:  10
Output: True
"""
import random
# установка "зерна" датчика случайных чисел, чтобы получались одни и те же случайные величины
random.seed(1)
# начальная инициализация поля (переменные P и N не менять, единицы записывать в список P)
N = int(input())
P = [[0] * N for i in range(N)]

# здесь продолжайте программу
def check_pos(lst: list, row: int, col: int) -> bool:
    """ Проверка, на отсутствие граничных ячеек со значением 1 """
    n = len(lst) - 1
    row_up = row - 1 if row > 0 else row
    row_down = row + 2 if row < n else row + 1
    col_left = col - 1 if col > 0 else col
    col_right = col + 2 if col < n else col + 1
    for el in lst[row_up:row_down]:
        if any(el[col_left:col_right]):
            return False
    return True


M = 10

while M:
    row = random.randint(0, N - 1)
    col = random.randint(0, N - 1)
    if check_pos(P, row, col):
        P[row][col] = 1
        M -= 1


# for el in range(N):
#     print(*P[el])

